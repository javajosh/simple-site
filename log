A personal log of thoughts. I will endeavor to keep it one thought per line, and never delete lines, and try to edit them as little as possible.
This project started with an idea and a terminal, and these commands:

10243  git init simple-site
10244  cd simple-site
10245  touch index.html
10246  touch hello.md
10247  touch about.md
10248  git commit -am 'Basic Static file structure'
10249  git add .
10250  git commit -am 'Basic Static file structure'
10251  ls
10252  subl .
10253  git commit -m 'Its an empty page that executes a function when it loads'
10254  ls
10255  git add .
10256  git status
10257  git commit -m 'A basic shell that just executes a function after document and resource load'
10258  open index.html
10259  touch run.sh
10260  chmod
10261  man chmod
10262  chmod 700 run.sh
10263  ls
10264  echo "open index.html" > run.sh
10265  ./run.sh
10266  git status
10267  git add run.sh
10268  touch log

All of this (and a lot more in Sublime) to produce a file structure with file contents that *do what I want*. At this point in time I just want a hello world printed in the browser console on load. This establishes a reasonable baseline for development.

Of particular interest is 10259 where I decided to encode 10258 as a script. I have essentially elevated the visibility and increased the liklihood that 10258 will be invoked in the future by developers (namely, me). A similar effect can be achieved with build and packaging systems, where people are trained to run mvn compile or npm init when they see a build.xml or a package.json, respectively. By contrast, 'run.sh' seems, at first, ambiguous. And yet, I believe, that it should not be.

So what are we building? Well. My thought was to build a single page app for a blog. But really focusing on the data, first, particularly in relationship to *files*. Not going for speed of development, but rather thoughtfulness of development.

10267 is also of interest because that's where I found I wanted something like GitHub Desktop as a git client because it allows me to cherry pick commits, down to the line. However, I realized that if I stay focused on achieving one thing at a time, then I don't need it.

#

Right now I want to consolidate what I know:
So far, this is a static web page program that you can run with 'run.sh' (at least on OSX).

#

Next I want to write a function that loads "sibling" resources. My biggest risk is distraction.

The most common way to write this function would be to a) install jquery, b) use a static server.

For me, the easiest way there is through `npm install jquery` and `python -m SimpleHTTPServer 8888` plus the necessary modification to index.html and run.sh. 

(There are other ways: `bower install jquery` + `npm install express` or `npm install -g simpatico` + `simpatico run` )

#

Okay, so I've just written a simple navigation system that does XHR and update the URL. So far, it always initializes to mode 0; let's change it so that it initializes to whichever mode is actually in the URL.

Well, that went very well. I was happy to reuse code in inferModeFromURL(). What trouble is looming? The need to pass more data around.

#

So it's working with data, but I'm still not satisfied. The whole thing seems very brittle and not very flexible. I suspect that I will either end up adding or recreating something like jquery bbq. For one thing, I dislike the way the URLs _look_, and making that change would require very careful rethinking of a lot of code. The other thing that bothers me is that the URL is really, truly the repository of special information, and 'about.html' is actually reading data out of it.
